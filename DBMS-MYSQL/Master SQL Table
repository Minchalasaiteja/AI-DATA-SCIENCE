
Master SQL Table

| Command               | Syntax                                                                  | Description                           | Example                                                                                 | Use Case                                 | Real-Time Scenario                                                                      |                           |                              |
| --------------------- | ----------------------------------------------------------------------- | ------------------------------------- | --------------------------------------------------------------------------------------- | ---------------------------------------- | --------------------------------------------------------------------------------------- | ------------------------- | ---------------------------- |
| **CREATE DATABASE**   | `CREATE DATABASE db_name;`                                              | Creates a new database                | `CREATE DATABASE ecommerce;`                                                            | Initialize a new DB                      | Starting a new project like an e-commerce platform                                      |                           |                              |
| **DROP DATABASE**     | `DROP DATABASE db_name;`                                                | Deletes an existing database          | `DROP DATABASE testdb;`                                                                 | Remove obsolete DB                       | Removing a temporary test DB                                                            |                           |                              |
| **CREATE TABLE**      | `CREATE TABLE table_name(column1 datatype, column2 datatype, ...);`     | Creates a new table                   | `CREATE TABLE users(id INT PRIMARY KEY, name VARCHAR(50));`                             | Storing structured data                  | User table in a web app                                                                 |                           |                              |
| **ALTER TABLE**       | `ALTER TABLE table_name ADD column_name datatype;`                      | Modify table structure                | `ALTER TABLE users ADD email VARCHAR(100);`                                             | Adding new fields                        | Adding email to user table                                                              |                           |                              |
| **DROP TABLE**        | `DROP TABLE table_name;`                                                | Deletes a table                       | `DROP TABLE users;`                                                                     | Remove unnecessary table                 | Deleting obsolete logs table                                                            |                           |                              |
| **INSERT INTO**       | `INSERT INTO table_name(column1, column2) VALUES(value1, value2);`      | Adds data into table                  | `INSERT INTO users(id, name) VALUES(1,'John');`                                         | Populate tables                          | Adding new customers to DB                                                              |                           |                              |
| **UPDATE**            | `UPDATE table_name SET column1=value1 WHERE condition;`                 | Modify existing data                  | `UPDATE users SET name='Doe' WHERE id=1;`                                               | Correct or update data                   | Updating user details                                                                   |                           |                              |
| **DELETE**            | `DELETE FROM table_name WHERE condition;`                               | Remove records                        | `DELETE FROM users WHERE id=1;`                                                         | Clean unwanted records                   | Deleting inactive accounts                                                              |                           |                              |
| **SELECT**            | `SELECT column1, column2 FROM table_name WHERE condition;`              | Query data                            | `SELECT name FROM users WHERE id=1;`                                                    | Fetch specific info                      | Display user info on dashboard                                                          |                           |                              |
| **JOIN (INNER)**      | `SELECT * FROM table1 INNER JOIN table2 ON table1.col=table2.col;`      | Combine tables where match exists     | `SELECT orders.id, users.name FROM orders INNER JOIN users ON orders.user_id=users.id;` | Merge related tables                     | Show orders with customer names                                                         |                           |                              |
| **JOIN (LEFT/RIGHT)** | `SELECT * FROM table1 LEFT JOIN table2 ON ...;`                         | Keep all from left/right table        | `SELECT users.name, orders.id FROM users LEFT JOIN orders ON users.id=orders.user_id;`  | Get all main table records               | List all customers, even with no orders                                                 |                           |                              |
| **GROUP BY**          | `SELECT column, COUNT(*) FROM table GROUP BY column;`                   | Aggregate data                        | `SELECT status, COUNT(*) FROM orders GROUP BY status;`                                  | Summarize info                           | Order count by status                                                                   |                           |                              |
| **HAVING**            | `SELECT column, COUNT(*) FROM table GROUP BY column HAVING COUNT(*)>1;` | Filter aggregated data                | `SELECT status, COUNT(*) FROM orders GROUP BY status HAVING COUNT(*)>10;`               | Filter grouped data                      | Customers with more than 10 orders                                                      |                           |                              |
| **ORDER BY**          | `SELECT * FROM table ORDER BY column ASC                                | DESC;`                                | Sort data                                                                               | `SELECT * FROM users ORDER BY name ASC;` | Sorting results                                                                         | Alphabetical user listing |                              |
| **DISTINCT**          | `SELECT DISTINCT column FROM table;`                                    | Remove duplicates                     | `SELECT DISTINCT country FROM users;`                                                   | Unique values                            | Get unique customer countries                                                           |                           |                              |
| **CREATE INDEX**      | `CREATE INDEX index_name ON table(column);`                             | Improves query speed                  | `CREATE INDEX idx_name ON users(name);`                                                 | Optimize SELECT                          | Speed up search by name                                                                 |                           |                              |
| **DROP INDEX**        | `DROP INDEX index_name ON table;`                                       | Remove index                          | `DROP INDEX idx_name ON users;`                                                         | Cleanup unused index                     | Reduce overhead in large table                                                          |                           |                              |
| **TRUNCATE**          | `TRUNCATE TABLE table_name;`                                            | Remove all rows                       | `TRUNCATE TABLE logs;`                                                                  | Quick cleanup                            | Empty old log table                                                                     |                           |                              |
| **GRANT**             | `GRANT ALL PRIVILEGES ON db.* TO 'user'@'host';`                        | Assign privileges                     | `GRANT SELECT, INSERT ON ecommerce.* TO 'john'@'localhost';`                            | Role-based access                        | Allow staff to update orders                                                            |                           |                              |
| **REVOKE**            | `REVOKE privilege ON db.* FROM 'user'@'host';`                          | Remove privileges                     | `REVOKE INSERT ON ecommerce.* FROM 'john'@'localhost';`                                 | Restrict access                          | Remove permission from ex-employee                                                      |                           |                              |
| **COMMIT**            | `COMMIT;`                                                               | Save transaction permanently          | `UPDATE accounts SET balance=balance-100 WHERE id=1; COMMIT;`                           | Ensure changes persist                   | Confirm money transfer                                                                  |                           |                              |
| **ROLLBACK**          | `ROLLBACK;`                                                             | Undo transaction                      | `UPDATE accounts SET balance=balance-100 WHERE id=1; ROLLBACK;`                         | Cancel wrong changes                     | Revert accidental updates                                                               |                           |                              |
| **SAVEPOINT**         | `SAVEPOINT sp_name;`                                                    | Set intermediate point in transaction | `SAVEPOINT sp1;`                                                                        | Partial rollback                         | Complex transaction handling                                                            |                           |                              |
| **CREATE VIEW**       | `CREATE VIEW view_name AS SELECT ...;`                                  | Virtual table                         | `CREATE VIEW active_users AS SELECT * FROM users WHERE status='active';`                | Simplify queries                         | Dashboard reporting                                                                     |                           |                              |
| **DROP VIEW**         | `DROP VIEW view_name;`                                                  | Delete a view                         | `DROP VIEW active_users;`                                                               | Cleanup                                  | Remove temporary reporting view                                                         |                           |                              |
| **CREATE PROCEDURE**  | `CREATE PROCEDURE proc_name() BEGIN ... END;`                           | Stored procedure                      | `CREATE PROCEDURE GetUsers() BEGIN SELECT * FROM users; END;`                           | Reusable queries                         | Generate monthly user report                                                            |                           |                              |
| **CALL PROCEDURE**    | `CALL proc_name();`                                                     | Execute procedure                     | `CALL GetUsers();`                                                                      | Execute stored logic                     | Trigger report generation                                                               |                           |                              |
| **CREATE TRIGGER**    | `CREATE TRIGGER trig_name BEFORE/AFTER INSERT                           | UPDATE                                | DELETE ON table FOR EACH ROW BEGIN ... END;`                                            | Auto action on event                     | `CREATE TRIGGER trg_user BEFORE INSERT ON users FOR EACH ROW SET NEW.created_at=NOW();` | Auto-maintenance          | Set timestamps automatically |
| **DROP TRIGGER**      | `DROP TRIGGER trig_name;`                                               | Delete trigger                        | `DROP TRIGGER trg_user;`                                                                | Remove auto-action                       | Remove obsolete trigger                                                                 |                           |                              |
| **EXPLAIN**           | `EXPLAIN SELECT * FROM table;`                                          | Query execution plan                  | `EXPLAIN SELECT * FROM orders;`                                                         | Optimize query                           | Analyze query bottlenecks                                                               |                           |                              |

---
